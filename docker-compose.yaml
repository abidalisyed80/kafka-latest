version: '3.3'
services:
  zookeeper1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper1
    hostname: zookeeper1
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888
    volumes:
      - /data/zookeeper1_data:/var/lib/zookeeper
    networks:
      - kafka-network


  zookeeper2:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper2
    hostname: zookeeper2
    restart: unless-stopped
    ports:
      - "2182:2182"
    environment:
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888
    volumes:
      - /data/zookeeper2_data:/var/lib/zookeeper
    networks:
      - kafka-network

  kafka-broker0:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker0
    hostname: kafka-broker0
    depends_on:
      - zookeeper1
      - zookeeper2
    ports:
      - "9092:9092"
    environment:
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker0:9092
      #PLUGIN_PATH: '/usr/share/java/kafka,/usr/share/java/kafka_plugins'
    volumes:
      - type: "bind"
        source: /data/files/server0.properties
        target: /etc/kafka/server.properties
      - /data/kafka-broker0_data:/var/lib/kafka:rw
      - /tmp:/tmp:rw
    networks:
      - kafka-network


  kafka-broker1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker1
    hostname: kafka-broker1
    depends_on:
      - zookeeper1
      - zookeeper2
    ports:
      - "19092:9092"
    environment:
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker1:9092
      PLUGIN_PATH: '/usr/share/java/kafka,/usr/share/java/kafka_plugins'
    depends_on:
      - zookeeper1
      - zookeeper2
    volumes:
      - type: "bind"
        source: /data/files/server1.properties
        target: /etc/kafka/server.properties
      - /data/kafka-broker1_data:/var/lib/kafka:rw
      - /tmp:/tmp:rw
    networks:
      - kafka-network

  kafka-broker2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker2
    hostname: kafka-broker2
    depends_on:
      - zookeeper1
      - zookeeper2
    ports:
      - "29092:9092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker2:9092
      PLUGIN_PATH: '/usr/share/java/kafka,/usr/share/java/kafka_plugins'
    depends_on:
      - zookeeper1
      - zookeeper2
    volumes:
      - type: "bind"
        source: /data/files/server2.properties
        target: /etc/kafka/server.properties
      - /data/kafka-broker2_data:/var/lib/kafka:rw
      - /tmp:/tmp:rw
    networks:
      - kafka-network

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: kafka-connect
    hostname: kafka-connect
    restart: unless-stopped
    ports:
      - "8083:8083"
    depends_on:
      - kafka-broker0
      - kafka-broker1
      - kafka-broker2
      - kafka-schema-registry
    volumes:
      - type: "bind"
        source: /data/files/connect-distributed.properties
        target: /etc/kafka/connect-distributed.properties
      - /data/kafka-connect_data:/var/lib/kafka:rw
      - /tmp:/tmp:rw
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka-broker0:9092,kafka-broker1:9092,kafka-broker2:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081
#      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.1.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      CONNECT_PLUGIN_PATH: '/usr/share/java/kafka,/usr/share/java/kafka_plugins'
      AWS_ACCESS_KEY: '<YOUR ACCESS KEY HERE>'
      AWS_SECRET_KEY: '<YOUR SECRET KEY HERE>'
    networks:
      - kafka-network


  kafka-schema-registry:
    image: confluentinc/cp-schema-registry
    hostname: kafka-schema-registry
    container_name: kafka-schema-registry
    restart: unless-stopped
    ports:
      - "8081:8081"
    depends_on:
      - kafka-broker0
      - kafka-broker1
      - kafka-broker2
    volumes:
      - /tmp:/tmp:rw
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-broker0:9092,kafka-broker1:9092,kafka-broker2:9092"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - kafka-network

  kafka-control-center:
    image: confluentinc/cp-control-center
    hostname: kafka-control-center
    container_name: kafka-control-center
    restart: unless-stopped
    depends_on:
      - kafka-broker0
      - kafka-broker1
      - kafka-broker2
      - kafka-schema-registry
      - kafka-connect
      - kafka-ksqldb-server
      - kafka-ksqldb-cli
        #- postgres
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka-broker0:9092,kafka-broker1:9092,kafka-broker2:909"
      CONTROL_CENTER_CONNECT_CLUSTER: 'kafka-connect:8083'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'kafka-connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://kafka-ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://kafka-ksqldb-server:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://kafka-schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      PORT: 9021
    networks:
      - kafka-network

  kafka-ksqldb-server:
    image: confluentinc/cp-ksqldb-server
    hostname: kafka-ksqldb-server
    container_name: kafka-ksqldb-server
    restart: unless-stopped
    depends_on:
      - kafka-broker0
      - kafka-broker1
      - kafka-broker2
      - kafka-connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "kafka-broker0:9092,kafka-broker1:9092,kafka-broker2:9092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://kafka-schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://kafka-connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
    networks:
      - kafka-network

  kafka-ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli
    container_name: kafka-ksqldb-cli
    hostname: kafka-ksqldb-cli
    restart: unless-stopped
    depends_on:
      - kafka-broker0
      - kafka-broker1
      - kafka-broker2
      - kafka-connect
      - kafka-ksqldb-server
    entrypoint: /bin/sh
    tty: true
    networks:
      - kafka-network
    
  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest
    container_name: kafka-rest-proxy
    hostname: kafka-rest-proxy
    restart: always
    depends_on:
      - kafka-broker0
      - kafka-broker1
      - kafka-broker2
      - kafka-schema-registry
    ports:
      - 8082:8082
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: "kafka-broker0:9092,kafka-broker1:9092,kafka-broker2:9092"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    restart: unless-stopped
    hostname: kafka-ui
    volumes:
      - type: "bind"
        source: /data/kafkaui_dynamic_config.yaml
        target: /etc/kafkaui/dynamic_config.yaml
    ports:
      - "9080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
      - kafka-network
 
#=========MONITORING SECTION=======     
#Kafka exporter for Prometheus
# ----------------------------------
#  kafka-exporter:
#    image: danielqsj/kafka-exporter 
#    command: ["--kafka.server=kafka-broker:9092"]
#    restart: always
#    ports:
#      - 9308:9308 
#    networks:
#      - kafka-network

##Host Node metrics export for Prometheus
## ----------------------------------
#  node-exporter:
#    image: prom/node-exporter:latest
#    container_name: node-exporter
#    restart: unless-stopped
#    network_mode: host
#    pid: host
#    volumes:
#      - '/:/host:ro,rslave'
#    expose:
#      - 9100
#
## Docker Containres Stauts for Prometheus
## ----------------------------------
#  cadvisor:
#    image: google/cadvisor:latest
#    container_name: cadvisor
#    restart: always
#    ports:
#      - 8100:8080
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:rw
#      - /sys:/sys:ro
#      - /var/lib/docker:/var/lib/docker:ro
#

networks:
  kafka-network:
    driver: bridge

volumes:
  kafka-connect_data:
  kafka-broker0_data:
  kafka-broker1_data:
  kafka-broker2_data:
  zookeeper1_data:
  zookeeper2_data:

